                                                                     
                                                                     
                                                                     
                                             
package edu.isi.bmkeg.skm.core.uima.ae.ml;

import org.apache.uima.UimaContext;
import org.apache.uima.resource.ResourceInitializationException;
import org.cleartk.classifier.SequenceClassifier;
import org.cleartk.util.ReflectionUtil;
import org.uimafit.component.JCasAnnotator_ImplBase;
import org.uimafit.descriptor.ConfigurationParameter;
import org.uimafit.factory.ConfigurationParameterFactory;
import org.uimafit.factory.initializable.Initializable;
import org.uimafit.factory.initializable.InitializableFactory;


public abstract class ISISequentialTagger<OUTCOME_TYPE> extends JCasAnnotator_ImplBase 
	implements Initializable
{

	
	public final String PARAM_CLASSIFIER_CLASS_NAME = ConfigurationParameterFactory
	.createConfigurationParameterName(ISISequentialTagger.class, "classifierClassName");

	@ConfigurationParameter(mandatory = false, description = "provides the full name of the Classifier class to be used.")
	private String classifierClassName;

	
	public final String PARAM_CLASSIFIER_MODEL_FILE = ConfigurationParameterFactory
	.createConfigurationParameterName(ISISequentialTagger.class, "modelFile");

	@ConfigurationParameter(mandatory = false, description = "provides the model file generated by the training process.")
	private String modelFile;
	
	protected SequenceClassifier<OUTCOME_TYPE> classifier;

	
	@Override
	public void initialize(UimaContext context)
			throws ResourceInitializationException
	{
		// TODO Auto-generated method stub
		super.initialize(context);
		classifierClassName = (String) getParameterValue(context,PARAM_CLASSIFIER_CLASS_NAME);
		modelFile = (String) getParameterValue(context, PARAM_CLASSIFIER_MODEL_FILE);
		if (classifierClassName != null) {
			// create the factory and instantiate the data writer
			SequenceClassifier<?> untypedClassifier = InitializableFactory
			.create(context, classifierClassName, SequenceClassifier.class);
			InitializableFactory.initialize(untypedClassifier, context);
			this.classifier = ReflectionUtil.uncheckedCast(untypedClassifier);
		}
	}
	
	
	private String getParameterValue(UimaContext context, String paramName) throws ResourceInitializationException {
		String returnValue = "";
		Object o = context.getConfigParameterValue(paramName);
		if (o == null) {
			String message = "no value for :" + paramName;
			throw new ResourceInitializationException(new Exception(message));
		}
		if (o.getClass().getName().equals("java.lang.String")) {
    	   returnValue = (String) o;
		}  
		else {
			if (o == null) {
				Exception squarePeg = new Exception("null value for " + paramName );
				throw new ResourceInitializationException(squarePeg);
			} else {
				Exception squarePeg = new Exception("wrong type: " + o.getClass() + " for " + paramName );
				throw new ResourceInitializationException(squarePeg);
			}
		}
		
		return returnValue;
	}

}
